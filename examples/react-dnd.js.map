{"version":3,"sources":["webpack:///./examples/react-dnd.js"],"names":["injectGlobal","dragDirection","dragIndex","hoverIndex","initialClientOffset","clientOffset","sourceClientOffset","hoverMiddleY","y","hoverClientY","BodyRow","props","isOver","connectDragSource","connectDropTarget","moveRow","dragRow","restProps","style","cursor","className","direction","index","rowSource","beginDrag","rowTarget","drop","monitor","getItem","DropTarget","connect","dropTarget","getSourceClientOffset","DragSource","dragSource","getClientOffset","getInitialClientOffset","columns","title","dataIndex","key","width","id","render","Demo","state","data","a","b","c","d","components","body","row","setState","update","$splice","record","React","Component","DragDropContext","ReactDOM","document","getElementById"],"mappings":"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","file":"examples/react-dnd.js","sourcesContent":["/* eslint-disable no-unused-expressions,new-cap */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { injectGlobal } from 'styled-components';\nimport update from 'immutability-helper';\nimport { DragDropContext, DragSource, DropTarget } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport Table from 'rc-table';\nimport 'rc-table/assets/index.less';\n\ninjectGlobal`\n  tr.drop-over-downward td {\n    border-bottom: 2px dashed red;\n  }\n\n  tr.drop-over-upward td {\n    border-top: 2px dashed red;\n  }\n`;\n\nfunction dragDirection(\n  dragIndex,\n  hoverIndex,\n  initialClientOffset,\n  clientOffset,\n  sourceClientOffset,\n) {\n  const hoverMiddleY = (initialClientOffset.y - sourceClientOffset.y) / 2;\n  const hoverClientY = clientOffset.y - sourceClientOffset.y;\n  if (dragIndex < hoverIndex && hoverClientY > hoverMiddleY) {\n    return 'downward';\n  }\n  if (dragIndex > hoverIndex && hoverClientY < hoverMiddleY) {\n    return 'upward';\n  }\n}\n\nlet BodyRow = (props) => {\n  const {\n    isOver,\n    connectDragSource,\n    connectDropTarget,\n    moveRow,\n    dragRow,\n    clientOffset,\n    sourceClientOffset,\n    initialClientOffset,\n    ...restProps,\n  } = props;\n  const style = { cursor: 'move' };\n\n  let className = restProps.className;\n  if (isOver && initialClientOffset) {\n    const direction = dragDirection(\n      dragRow.index,\n      restProps.index,\n      initialClientOffset,\n      clientOffset,\n      sourceClientOffset\n    );\n    if (direction === 'downward') {\n      className += ' drop-over-downward';\n    }\n    if (direction === 'upward') {\n      className += ' drop-over-upward';\n    }\n  }\n\n  return connectDragSource(\n    connectDropTarget(\n      <tr\n        {...restProps}\n        className={className}\n        style={style}\n      />\n    )\n  );\n};\n\nconst rowSource = {\n  beginDrag(props) {\n    return {\n      index: props.index,\n    };\n  },\n};\n\nconst rowTarget = {\n  drop(props, monitor) {\n    const dragIndex = monitor.getItem().index;\n    const hoverIndex = props.index;\n\n    // Don't replace items with themselves\n    if (dragIndex === hoverIndex) {\n      return;\n    }\n\n    // Time to actually perform the action\n    props.moveRow(dragIndex, hoverIndex);\n\n    // Note: we're mutating the monitor item here!\n    // Generally it's better to avoid mutations,\n    // but it's good here for the sake of performance\n    // to avoid expensive index searches.\n    monitor.getItem().index = hoverIndex;\n  },\n};\n\nBodyRow = DropTarget('row', rowTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  sourceClientOffset: monitor.getSourceClientOffset(),\n}))(\n  DragSource('row', rowSource, (connect, monitor) => ({\n    connectDragSource: connect.dragSource(),\n    dragRow: monitor.getItem(),\n    clientOffset: monitor.getClientOffset(),\n    initialClientOffset: monitor.getInitialClientOffset(),\n  }))(BodyRow)\n);\n\nconst columns = [\n  { title: 'title1', dataIndex: 'a', key: 'a', width: 100 },\n  { id: '123', title: 'title2', dataIndex: 'b', key: 'b', width: 100 },\n  { title: 'title3', dataIndex: 'c', key: 'c', width: 200 },\n  {\n    title: 'Operations',\n    dataIndex: '',\n    key: 'd',\n    render() {\n      return <a href=\"#\">Operations</a>;\n    },\n  },\n];\n\nclass Demo extends React.Component {\n  state = {\n    data: [\n      { a: '123', key: '1' },\n      { a: 'cdd', b: 'edd', key: '2' },\n      { a: '1333', c: 'eee', d: 2, key: '3' },\n    ],\n  }\n\n  components = {\n    body: {\n      row: BodyRow,\n    },\n  }\n\n  moveRow = (dragIndex, hoverIndex) => {\n    const { data } = this.state;\n    const dragRow = data[dragIndex];\n\n    this.setState(\n      update(this.state, {\n        data: {\n          $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]],\n        },\n      }),\n    );\n  }\n\n  render() {\n    return (\n      <Table\n        columns={columns}\n        data={this.state.data}\n        components={this.components}\n        onRow={(record, index) => ({\n          index,\n          moveRow: this.moveRow,\n        })}\n      />\n    );\n  }\n}\n\nDemo = DragDropContext(HTML5Backend)(Demo);\n\nReactDOM.render(\n  <div>\n    <h2>Integrate with react-dnd</h2>\n    <Demo />\n  </div>,\n  document.getElementById('__react-content')\n);\n\n\n\n// WEBPACK FOOTER //\n// ./examples/react-dnd.js"],"sourceRoot":""}